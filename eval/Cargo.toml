[package]
name = "arithmetic-eval"
version = "0.3.0"
authors = ["Alex Ostrovski <ostrovski.alex@gmail.com>"]
edition = "2018"
readme = "README.md"
license = "MIT OR Apache-2.0"
description = "Simple interpreter for arithmetic expressions."
repository = "https://github.com/slowli/arithmetic-parser"
categories = ["mathematics", "compilers"]
keywords = ["interpreter", "arithmetic", "scripting", "language"]

[package.metadata.docs.rs]
all-features = true
# Set `docsrs` to enable unstable `doc(cfg(...))` attributes.
rustdoc-args = ["--cfg", "docsrs"]

[dependencies]
# Public dependencies (present in the public API).
arithmetic-parser = { version = "0.3.0", path = "../parser" }
anyhow = { version = "1.0.27", default_features = false }
num-traits = { version = "0.2.14", default_features = false }
num-complex = { version = "0.4.0", optional = true }
num-bigint = { version = "0.4.0", default_features = false, optional = true }

# Private dependencies.
derive_more = "0.99.7"
hashbrown = "0.11.0"

[dev-dependencies]
anyhow = "1.0.27"
assert_matches = "1.3.0"
criterion = "0.3.1"
glass_pumpkin = "1.0.0"
nom = "6"
pulldown-cmark = "0.8.0"
sha2 = "0.9.2"
rand = "0.8.3"
static_assertions = "1.1.0"
typed-arena = "2.0.1"
version-sync = "0.9"

[features]
default = ["std"]
# Enables support of types from `std`, such as the `Error` trait, and propagates
# to dependencies.
std = ["arithmetic-parser/std", "anyhow/std", "num-traits/std"]
# Enables support of grammars with complex-valued literals.
complex = ["std", "num-complex", "arithmetic-parser/num-complex"]
# Enables support of grammars with arbitrary-precision integers.
bigint = ["num-bigint", "arithmetic-parser/num-bigint"]

[[bench]]
name = "interpreter"
harness = false
path = "benches/interpreter.rs"

[[test]]
name = "custom_cmp"
path = "tests/custom_cmp.rs"
required-features = ["complex"]

[[example]]
name = "el_gamal"
path = "examples/el_gamal.rs"
required-features = ["bigint", "num-bigint/rand"]

[[example]]
name = "cyclic_group"
path = "examples/cyclic_group.rs"
required-features = ["bigint", "num-bigint/rand"]
