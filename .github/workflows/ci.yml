name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Minimum supported Rust version.
  msrv: 1.70.0
  # Nightly Rust toolchain for building docs and checking nostd support.
  nightly: nightly-2024-07-05

jobs:
  # Checks minimum supported Rust version.
  build-msrv:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.msrv }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-msrv-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-msrv-cargo

      - name: Build parser and typing libraries
        run: cargo build -p arithmetic-parser -p arithmetic-typing -p arithmetic-eval --lib

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - name: Install cargo-deny
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-deny
          version: "^0.16"

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo

      - name: Format
        run: cargo fmt --all -- --check
      - name: Clippy
        run: cargo clippy --workspace --all-features --all-targets -- -D warnings
      - name: Lint dependencies
        run: cargo deny --workspace --all-features check

      - name: Run tests for libraries
        run: cargo test -p arithmetic-parser -p arithmetic-eval -p arithmetic-typing --all-features --all-targets
      - name: Run CLI tests
        run: cargo test -p arithmetic-parser-cli --all-features --all-targets
      - name: Run doc tests
        run: cargo test -p arithmetic-parser -p arithmetic-eval -p arithmetic-typing --features=nom/std --doc

      - name: Run parser example
        run: cargo run -p arithmetic-parser --all-features --example complex_c
      - name: Run eval example
        run: cargo run --manifest-path=eval/Cargo.toml --example owned_module
      - name: Run ElGamal encryption example
        run: cargo run --manifest-path=eval/Cargo.toml --example el_gamal --features bigint,num-bigint/rand
      - name: Run cyclic group example
        run: cargo run --manifest-path=eval/Cargo.toml --example cyclic_group --features bigint,num-bigint/rand
      - name: Run typing example (strings)
        run: cargo run -p arithmetic-typing --example strings
      - name: Run typing example (num_or_bytes)
        run: cargo run -p arithmetic-typing --example num_or_bytes

      - name: Compile WASM
        run: (cd e2e-tests/wasm; wasm-pack build --target nodejs)
      - name: Run WASM
        run: node e2e-tests/wasm/test.js

  # Checks that the crate actually builds without `std`. To do this,
  # we take a target (`thumbv7m-none-eabi`) that does not have `std` support.
  build-nostd:
    needs:
      - build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: e2e-tests/no-std

    steps:
      - uses: actions/checkout@v4

      - name: Install qemu
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-suggests --no-install-recommends qemu-system-arm

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.nightly }}
          components: rustfmt, clippy
          targets: thumbv7m-none-eabi

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-nostd-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-nostd-cargo

      - name: Run binary
        run: cargo run -p arithmetic-parser-nostd --release

  document:
    if: github.event_name == 'push'
    needs:
      - build
      - build-msrv
      - build-nostd
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.nightly }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-document-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-document-cargo

      - name: Build docs
        run: |
          cargo clean --doc && \
          cargo rustdoc -p arithmetic-parser --all-features -- -Z unstable-options \
            --extern-html-root-url anyhow=https://docs.rs/anyhow/~1.0.27 \
            --extern-html-root-url nom=https://docs.rs/nom/~7.0.0 \
            --extern-html-root-url nom_locate=https://docs.rs/nom_locate/~4.0.0 && \
          cargo rustdoc -p arithmetic-eval --all-features -- --cfg docsrs
          cargo rustdoc -p arithmetic-typing --all-features -- --cfg docsrs

      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: target/doc
          single-commit: true
