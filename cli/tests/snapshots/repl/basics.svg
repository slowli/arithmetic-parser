<!-- Created with term-transcript v0.3.0 (https://github.com/slowli/term-transcript) -->
<svg viewBox="0 -22 720 384" width="720" height="384" xmlns="http://www.w3.org/2000/svg">
  <switch>
    <g requiredExtensions="http://www.w3.org/1999/xhtml">
      <style>
        .container {
          padding: 0 10px;
          color: #e5e5e5;
          line-height: 18px;
        }
        .container pre {
          padding: 0;
          margin: 0;
          font: 14px SFMono-Regular, Consolas, Liberation Mono, Menlo, monospace;
          line-height: inherit;
        }
        .input {
          margin: 0 -10px 6px;
          color: #e5e5e5;
          background: rgba(255, 255, 255, 0.1);
          padding: 2px 10px;
        }
        .input-hidden { display: none; }
        .output { margin-bottom: 6px; }
        .scrollbar { fill: #fff; fill-opacity: 0.35; }
        .bold,.prompt { font-weight: bold; }
        .italic { font-style: italic; }
        .underline { text-decoration: underline; }
        .dimmed { opacity: 0.7; }
        .hard-br {
          position: relative;
          margin-left: 5px;
        }
        .hard-br:before {
          content: '↓';
          font-size: 16px;
          height: 16px;
          position: absolute;
          bottom: 0;
          transform: rotate(45deg);
          opacity: 0.8;
        }
        .fg0 { color: #1c1c1c; } .bg0 { background: #1c1c1c; }
        .fg1 { color: #ff005b; } .bg1 { background: #ff005b; }
        .fg2 { color: #cee318; } .bg2 { background: #cee318; }
        .fg3 { color: #ffe755; } .bg3 { background: #ffe755; }
        .fg4 { color: #048ac7; } .bg4 { background: #048ac7; }
        .fg5 { color: #833c9f; } .bg5 { background: #833c9f; }
        .fg6 { color: #0ac1cd; } .bg6 { background: #0ac1cd; }
        .fg7 { color: #e5e5e5; } .bg7 { background: #e5e5e5; }
        .fg8 { color: #666666; } .bg8 { background: #666666; }
        .fg9 { color: #ff00a0; } .bg9 { background: #ff00a0; }
        .fg10 { color: #ccff00; } .bg10 { background: #ccff00; }
        .fg11 { color: #ff9f00; } .bg11 { background: #ff9f00; }
        .fg12 { color: #48c6ff; } .bg12 { background: #48c6ff; }
        .fg13 { color: #be67e1; } .bg13 { background: #be67e1; }
        .fg14 { color: #63e7f0; } .bg14 { background: #63e7f0; }
        .fg15 { color: #f3f3f3; } .bg15 { background: #f3f3f3; }
      </style>
      <rect width="100%" height="100%" y="-22" rx="4.5" style="fill: #1c1c1c;" />
      <rect width="100%" height="26" y="-22" clip-path="inset(0 0 -10 0 round 4.5)" style="fill: #fff; fill-opacity: 0.1;"/>
      <circle cx="17" cy="-9" r="7" style="fill: #ff005b;"/>
      <circle cx="37" cy="-9" r="7" style="fill: #ffe755;"/>
      <circle cx="57" cy="-9" r="7" style="fill: #cee318;"/>
      <svg x="0" y="10" width="720" height="342" viewBox="0 0 720 342">
        <animate attributeName="viewBox" values="0 0 720 342;0 52 720 342;0 104 720 342;0 156 720 342;0 208 720 342;0 260 720 342;0 312 720 342;0 364 720 342" dur="28.0s" repeatCount="indefinite" calcMode="discrete" />
        <foreignObject width="720" height="660">
          <div xmlns="http://www.w3.org/1999/xhtml" class="container">
            <div class="input"><pre><span class="prompt">&gt;&gt;&gt;</span> 1 + 2*3</pre></div>
            <div class="output"><pre><span class="fg2">7</span></pre></div>
            <div class="input"><pre><span class="prompt">&gt;&gt;&gt;</span> all &#x3D; |array, pred| array.fold(true, |acc, x| acc &amp;&amp; pred(x));</pre></div>
            <div class="output"><pre></pre></div>
            <div class="input"><pre><span class="prompt">&gt;&gt;&gt;</span> all</pre></div>
            <div class="output"><pre>fn(2 args)[
  fold = (native fn),
  true = <span class="fg6">true</span>
]</pre></div>
            <div class="input"><pre><span class="prompt">&gt;&gt;&gt;</span> all((1, 2, 5), |x| 0 &lt; x)</pre></div>
            <div class="output"><pre><span class="fg6">true</span></pre></div>
            <div class="input"><pre><span class="prompt">&gt;&gt;&gt;</span> all((1, -2, 5), |x| 0 &lt; x)</pre></div>
            <div class="output"><pre><span class="fg6">false</span></pre></div>
            <div class="input"><pre><span class="prompt">&gt;&gt;&gt;</span> all((1, 2, 5, Array.map), |x| 0 &lt; x)</pre></div>
            <div class="output"><pre><span class="bold fg9">error[EVAL]</span><span class="bold">: Value is not comparable</span>
  <span class="fg4">┌─</span> Snippet #6:1:35
  <span class="fg4">│</span>
<span class="fg4">1</span> <span class="fg4">│</span> all((1, 2, 5, Array.map), |x| 0 &lt; <span class="fg1">x</span>)
  <span class="fg4">│</span> <span class="fg4">----------------------------------</span><span class="fg1">^</span><span class="fg4">-</span>
  <span class="fg4">│</span> <span class="fg4">│</span>                         <span class="fg4">│</span>       <span class="fg1">│</span>
  <span class="fg4">│</span> <span class="fg4">│</span>                         <span class="fg4">│</span>       <span class="fg1">Cannot be compared</span>
  <span class="fg4">│</span> <span class="fg4">│</span>                         <span class="fg4">The error occurred in function `pred`</span>
  <span class="fg4">│</span> <span class="fg4">Call at depth 3</span>
  <span class="fg4">│</span>
  <span class="fg4">┌─</span> Snippet #2:1:21
  <span class="fg4">│</span>
<span class="fg4">1</span> <span class="fg4">│</span> all = |array, pred| array.fold(true, |acc, x| acc &amp;&amp; pred(x));
  <span class="fg4">│</span>                     <span class="fg4">-----------------------------------------</span>
  <span class="fg4">│</span>                     <span class="fg4">│</span>                                <span class="fg4">│</span>
  <span class="fg4">│</span>                     <span class="fg4">│</span>                                <span class="fg4">Call at depth 1</span>
  <span class="fg4">│</span>                     <span class="fg4">Call at depth 2</span>
  <span class="fg4">│</span>
  <span class="fg4">=</span> Only primitive values can be compared; complex values cannot
</pre></div>
          </div>
        </foreignObject>
      </svg>
      <rect class="scrollbar" x="713" y="10" width="5" height="40">
        <animateTransform attributeName="transform" attributeType="XML" type="translate" values="0 0;0 43;0 86;0 129;0 172;0 215;0 258;0 302" dur="28.0s" repeatCount="indefinite" calcMode="discrete" />
      </rect>
    </g>
    <text x="10" y="18" style="font: 14px SFMono-Regular, Consolas, Liberation Mono, Menlo, monospace; fill: #ff005b;">
      HTML embedding not supported.
      Consult <tspan style="text-decoration: underline; text-decoration-thickness: 1px;"><a href="https://github.com/slowli/term-transcript/blob/HEAD/FAQ.md">term-transcript docs</a></tspan> for details.
    </text>
  </switch>
</svg>
