name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Minimum supported Rust version.
  msrv: 1.65.0
  # Nightly Rust toolchain for building docs and checking nostd support.
  nightly: nightly-2023-09-09

jobs:
  # Checks minimum supported Rust version.
  build-msrv:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.msrv }}
          override: true
      - name: Generate lockfile
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-msrv-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-msrv-cargo

      - name: Build parser and typing libraries
        uses: actions-rs/cargo@v1
        with:
          command: build
          # Avoid building the WASM E2E test crate since it requires Rust 1.54+
          args: -p arithmetic-parser -p arithmetic-typing --lib
      - name: Build eval library
        uses: actions-rs/cargo@v1
        with:
          command: build
          # `hashbrown` dependency requires Rust 1.56+, so we don't enable it
          args: -p arithmetic-eval --features complex,bigint --lib

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '18'
      - name: Install wasm-pack
        uses: jetli/wasm-pack-action@v0.3.0
        with:
          version: 'latest'
      - name: Generate lockfile
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: |
            target/
            cli/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo

      - name: Format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace --all-features --all-targets -- -D warnings
      - name: Clippy CLI
        uses: actions-rs/clippy-check@v1
        with:
          name: "clippy (CLI)"
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --manifest-path=cli/Cargo.toml --all-features --all-targets -- -D warnings

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --all-features --all-targets
      - name: Run CLI tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=cli/Cargo.toml --all-features --all-targets
      - name: Run doc tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --features=nom/std --doc

      - name: Run parser example
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: -p arithmetic-parser --all-features --example complex_c
      - name: Run eval example
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --manifest-path eval/Cargo.toml --example owned_module
      - name: Run ElGamal encryption example
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --manifest-path eval/Cargo.toml --example el_gamal --features bigint,num-bigint/rand
      - name: Run cyclic group example
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --manifest-path eval/Cargo.toml --example cyclic_group --features bigint,num-bigint/rand
      - name: Run typing example (strings)
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: -p arithmetic-typing --example strings
      - name: Run typing example (num_or_bytes)
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: -p arithmetic-typing --example num_or_bytes

      - name: Compile WASM
        run: (cd e2e-tests/wasm; wasm-pack build --target nodejs)
      - name: Run WASM
        run: node e2e-tests/wasm/test.js

  # Checks that the crate actually builds without `std`. To do this,
  # we take a target (`thumbv7m-none-eabi`) that does not have `std` support.
  build-nostd:
    needs:
      - build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: e2e-tests/no-std

    steps:
      - uses: actions/checkout@v3

      - name: Install qemu
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-suggests --no-install-recommends qemu-system-arm

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.nightly }}
          override: true
          components: rustfmt, clippy
          target: thumbv7m-none-eabi
      - name: Generate lockfile
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile
          args: --manifest-path=e2e-tests/no-std/Cargo.toml

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: e2e-tests/no-std/target
          key: ${{ runner.os }}-nostd-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-nostd-cargo

      # Since it's impossible to include the `nostd` crate into the common workspace,
      # we need to perform fmt / clippy checks for it separately.
      - name: Format
        run: cargo fmt -- --check
      - name: Clippy
        run: cargo clippy --bin arithmetic-parser-nostd --all-features -- -D warnings

      - name: Run binary
        run: cargo run --release

  document:
    if: github.event_name == 'push'
    needs:
      - build
      - build-msrv
      - build-nostd
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.nightly }}
          profile: minimal
          override: true
      - name: Generate lockfile
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-document-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-document-cargo

      - name: Build docs
        run: |
          cargo clean --doc && \
          cargo rustdoc -p arithmetic-parser --all-features -- -Z unstable-options \
            --extern-html-root-url anyhow=https://docs.rs/anyhow/~1.0.27 \
            --extern-html-root-url nom=https://docs.rs/nom/~7.0.0 \
            --extern-html-root-url nom_locate=https://docs.rs/nom_locate/~4.0.0 && \
          cargo rustdoc -p arithmetic-eval --all-features -- --cfg docsrs
          cargo rustdoc -p arithmetic-typing --all-features -- --cfg docsrs

      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: target/doc
          single-commit: true
